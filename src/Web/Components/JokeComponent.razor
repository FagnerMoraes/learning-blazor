@inject HttpClient Http

<div class="content">
    @if (_isLoadingJoke)
    {
        <div class="fa-3x">
            <i class="fas fa-sync fa-spin"></i>
        </div>
    }
    else if (_jokeText is not null)
    {
        <blockquote class="has-text-black">
            <span>@_jokeText</span>
            <cite>
                <a href="@(_sourceDetails.Site.ToString())" target="_blank">
                    &mdash; @(_sourceDetails.Source.ToString())
                </a>
            </cite>
        </blockquote>
    }
</div>

@code {
    private string? _jokeText = null;
    private JokeSourceDetails _sourceDetails = null!;
    private bool _isLoadingJoke = false;

    protected override Task OnInitializedAsync() =>
        RefreshJokeAsync();

    private async Task RefreshJokeAsync()
    {
        _isLoadingJoke = true;

        try
        {
            var response =
                await Http.GetFromJsonAsync<JokeResponse>(
                    "api/jokes/random");

            if (response is not null)
            {
                (_jokeText, _sourceDetails) = response;
            }
        }
        finally
        {
            _isLoadingJoke = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
