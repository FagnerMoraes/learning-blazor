@inject IJokeService JokeService

<div class="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
    <div class="relative py-3 sm:max-w-xl sm:mx-auto">
        <div class="absolute inset-0 bg-gradient-to-r from-cyan-400 to-sky-500 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl"></div>
        <div class="relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">
            <div class="max-w-md mx-auto">
                <div class="divide-y divide-gray-200">
                    <div class="py-8 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7">
                        <p>
                            @if (_jokeText is not null)
                            {
                                <span>
                                    @_jokeText
                                </span>
                            }
                        </p>
                    </div>
                    <div class="pt-6 text-base leading-6 font-bold sm:text-lg sm:leading-7">
                        <p>Want to hear another joke?</p>
                        <p>
                            <button class="mt-4 bg-gradient-to-br from-green-600 to-green-500 hover:from-green-500 hover:to-green-600 text-white p-2 rounded border border-green-600"
                                @onclick="RefreshJokeAsync">Refresh</button>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? _jokeText = null;

    protected override Task OnInitializedAsync() =>
        RefreshJokeAsync();

    private async Task RefreshJokeAsync()
    {
        Joke? joke = await JokeService.GetJokeAsync();
        _jokeText = joke?.Text;
    }
}
